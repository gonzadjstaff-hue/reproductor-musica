Lenguajes y conceptos:
- Python 3.13
- Programación orientada a objetos (clases, modularización)
- Modularización de código en múltiples módulos (main.py, ui.py, player.py, song.py)
- Manejo de archivos y rutas (os, persistencia con .txt)
- Manejo asincrónico con asyncio
- Creación de ejecutables (.exe) con PyInstaller
- Creación de instaladores de Windows con Inno Setup

Frameworks:
- Flet → framework para desarrollo de interfaces gráficas multiplataforma

Librerías:
- pygame → reproducción de audio
- mutagen → lectura de metadatos y duración de archivos MP3
- pillow (PIL) → conversión de imágenes a formato .ico
- asyncio (parte de la librería estándar de Python)

Herramientas externas:
- Visual Studio Code → entorno de desarrollo
- PyInstaller → generación de ejecutables a partir de scripts de Python
- Inno Setup → creación de instalador de Windows con icono, accesos directos y desinstalador

Dependencias externas / recursos:
- Archivos MP3 como entrada de la aplicación
- Archivo .ico como icono personalizado para el programa e instalador


Proyecto: Reproductor de Música (Aplicación de escritorio en Python)

Descripción breve:
Desarrollo de un reproductor de música en Python con interfaz gráfica moderna, gestión de playlists, controles de reproducción y volumen, empaquetado en instalador de Windows con icono y accesos directos.

Tecnologías y herramientas utilizadas:

Lenguaje:

Python 3.13

Frameworks:

Flet → framework para interfaces gráficas multiplataforma

Librerías:

Pygame → reproducción de audio

Mutagen → lectura de metadatos y duración de archivos MP3

Pillow (PIL) → manipulación de imágenes y conversión a .ico

Asyncio (lib estándar de Python) → tareas asincrónicas (barra de progreso)

Herramientas de desarrollo y distribución:

Visual Studio Code → entorno de desarrollo

Git/GitHub → control de versiones

PyInstaller → generación de ejecutables (.exe)

Inno Setup → creación de instalador de Windows con icono, accesos directos y desinstalador

Conceptos aplicados:

Programación orientada a objetos (POO)

Modularización de código en múltiples módulos (main.py, ui.py, player.py, song.py)

Manejo de archivos y rutas (os, persistencia de última carpeta en .txt)

Empaquetado y despliegue de aplicaciones de escritorio en Windows
